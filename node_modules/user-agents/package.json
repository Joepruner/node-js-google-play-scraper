{
  "_from": "user-agents",
  "_id": "user-agents@1.0.275",
  "_inBundle": false,
  "_integrity": "sha512-UYRL2b7cqEDl6x51GuZj95+TXSutsp7viDSBX4HMG6pv8fAg/OrMeZ2De9KJMopk0Rj4JZjYLehCbGK4ff3pfQ==",
  "_location": "/user-agents",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "user-agents",
    "fetchSpec": "latest",
    "name": "user-agents",
    "raw": "user-agents",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/user-agents/-/user-agents-1.0.275.tgz",
  "_shasum": "f069ea2d79c9875f02cc5b23c0d11ca4cb56f11b",
  "_shrinkwrap": null,
  "_spec": "user-agents",
  "_where": "/home/joepruner/Projects/GooglePlayScraper/public/javascripts",
  "author": {
    "email": "contact@intoli.com",
    "name": "Intoli, LLC"
  },
  "bugs": {
    "url": "https://github.com/intoli/user-agents/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "dot-json": "^1.1.0",
    "lodash.clonedeep": "^4.5.0"
  },
  "deprecated": false,
  "description": "A JavaScript library for generating random user agents. ",
  "devDependencies": {
    "babel": "^6.23.0",
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.3",
    "babel-eslint": "^8.2.3",
    "babel-loader": "^7.1.4",
    "babel-plugin-transform-builtin-extend": "^1.1.2",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "babel-preset-power-assert": "^2.0.0",
    "babel-register": "^6.26.0",
    "eslint": "^4.19.1",
    "eslint-config-airbnb": "^16.1.0",
    "eslint-loader": "^2.0.0",
    "eslint-plugin-import": "^2.12.0",
    "ga-api": "0.0.4",
    "imports-loader": "^0.8.0",
    "json-stable-stringify": "^1.0.1",
    "mocha": "^5.2.0",
    "moment": "^2.22.2",
    "power-assert": "^1.5.0",
    "random": "^2.0.12",
    "source-map-support": "^0.5.6",
    "webpack": "^4.10.2",
    "webpack-cli": "^2.1.4"
  },
  "homepage": "https://github.com/intoli/user-agents#readme",
  "license": "BSD-2-Clause",
  "main": "dist/index.js",
  "name": "user-agents",
  "optionalDependencies": {},
  "private": false,
  "readme": "<h1 vertical-align=\"middle\">\n    User Agents\n</h1>\n\n<p align=\"left\">\n    <a href=\"https://circleci.com/gh/intoli/user-agents/tree/master\">\n        <img src=\"https://img.shields.io/circleci/project/github/intoli/user-agents/master.svg\"\n            alt=\"Build Status\"></a>\n    <a href=\"https://circleci.com/gh/intoli/user-agents/tree/master\">\n        <img src=\"https://img.shields.io/github/last-commit/intoli/user-agents/master.svg\"\n            alt=\"Build Status\"></a>\n    <a href=\"https://github.com/intoli/user-agents/blob/master/LICENSE\">\n        <img src=\"https://img.shields.io/badge/License-BSD%202--Clause-blue.svg\"\n            alt=\"License\"></a>\n    <a href=\"https://www.npmjs.com/package/user-agents\">\n        <img src=\"https://img.shields.io/npm/v/user-agents.svg\"\n            alt=\"NPM Version\"></a>\n    <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n    <a target=\"_blank\" href=\"https://twitter.com/home?status=User%20Agents%20is%20a%20JavaScript%20module%20for%20generating%20random%20user%20agents%20that's%20updated%20daily%20with%20new%20market%20share%20data.%0A%0Ahttps%3A//github.com/intoli/user-agents\">\n        <img height=\"26px\" src=\"https://simplesharebuttons.com/images/somacro/twitter.png\"\n            alt=\"Tweet\"></a>\n    <a target=\"_blank\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A//github.com/intoli/user-agents\">\n        <img height=\"26px\" src=\"https://simplesharebuttons.com/images/somacro/facebook.png\"\n            alt=\"Share on Facebook\"></a>\n    <a target=\"_blank\" href=\"http://reddit.com/submit?url=https%3A%2F%2Fgithub.com%2Fintoli%2Fuser-agents&title=User%20Agents%20-%20Random%20user%20agent%20generation%20with%20daily-updated%20market%20share%20data\">\n        <img height=\"26px\" src=\"https://simplesharebuttons.com/images/somacro/reddit.png\"\n            alt=\"Share on Reddit\"></a>\n    <a target=\"_blank\" href=\"https://news.ycombinator.com/submitlink?u=https://github.com/intoli/user-agents&t=User%20Agents%20-%20Random%20user%20agent%20generation%20with%20daily-updated%20market%20share%20data\">\n        <img height=\"26px\" src=\"media/ycombinator.png\"\n            alt=\"Share on Hacker News\"></a>\n</p>\n\n\n###### [Installation](#installation) | [Examples](#examples) | [API](#api) | [How it Works](https://intoli.com/blog/user-agents/) | [Contributing](#contributing)\n\n> User-Agents is a JavaScript package for generating random [User Agents](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) based on how frequently they're used in the wild.\n> A new version of the package is automatically released every day, so the data is always up to date.\n> The generated data includes hard to find browser-fingerprint properties, and powerful filtering capabilities allow you to restrict the generated user agents to fit your exact needs.\n\nWeb scraping often involves creating realistic traffic patterns, and doing so generally requires a good source of data.\nThe User-Agents package provides a comprehensive dataset of real-world user agents and other browser properties which are commonly used for browser finerprinting and blocking automated web browsers.\nUnlike other random user agent generation libraries, the User-Agents package is updated automatically on a daily basis.\nThis means that you can use it without worrying about whether the data will be stale in a matter of months.\n\nGenerating a realistic random user agent is as simple as running `new UserAgent()`, but you can also easily generate user agents which correspond to a specific platform, device category, or even operating system version.\nThe fastest way to get started is to hop down to the [Examples](#examples) section where you can see it in action!\n\n\n## Installation\n\nThe User Agents package is available on npm with the package name [user-agents](https://npmjs.com/package/user-agents).\nYou can install it using your favorite JavaScript package manager in the usual way.\n\n```bash\n# With npm: npm install user-agents\n# With pnpm: pnpm install user-agents\n# With yarn:\nyarn add user-agents\n```\n\n\n## Examples\n\nThe User-Agents library offers a very flexible interface for generating user agents.\nThese examples illustrate some common use cases, and show how the filtering API can be used in practice.\n\n\n### Generating a Random User Agent\n\nThe most basic usage involves simply instantiating a `UserAgent` instance.\nIt will be automatically populated with a random user agent and browser fingerprint.\n\n\n```javascript\nimport UserAgent from 'user-agents';\n\n\nconst userAgent = new UserAgent();\nconsole.log(userAgent.toString());\nconsole.log(JSON.stringify(userAgent.data, null, 2));\n```\n\nIn this example, we've generated a random user agent and then logged out stringified versions both the `userAgent.data` object and `userAgent` itself to the console.\nAn example output might look something like this.\n\n```literal\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n```\n\n```json\n{\n  \"appName\": \"Netscape\",\n  \"connection\": {\n    \"downlink\": 10,\n    \"effectiveType\": \"4g\",\n    \"rtt\": 0\n  },\n  \"platform\": \"Win32\",\n  \"pluginsLength\": 3,\n  \"vendor\": \"Google Inc.\",\n  \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\",\n  \"viewportHeight\": 660,\n  \"viewportWidth\": 1260,\n  \"deviceCategory\": \"desktop\",\n  \"screenHeight\": 800,\n  \"screenWidth\": 1280\n}\n```\n\nThe `userAgent.toString()` call converts the user agent into a string which corresponds to the actual user agent.\nThe `data` property includes a randomly generated browser fingerprint that can be used for more detailed emulation.\n\n\n### Restricting Device Categories\n\nBy passing an object as a filter, each corresponding user agent property will be restricted based on its values.\n\n```javascript\nimport UserAgent from 'user-agents';\n\nconst userAgent = new UserAgent({ deviceCategory: 'mobile' })\n```\n\nThis code will generate a user agent with a `deviceCategory` of `mobile`.\nIf you replace `mobile` with either `desktop` or `tablet`, then the user agent will correspond to one of those device types instead.\n\n\n### Generating Multiple User Agents With The Same Filters\n\nThere is some computational overhead involved with applying a set of filters, so it's far more efficient to reuse the filter initialization when you need to generate many user agents with the same configuration.\nYou can call any initialized `UserAgent` instance like a function, and it will generate a new random instance with the same filters (you can also call `userAgent.random()` if you're not a fan of the shorthand).\n\n```javascript\nimport UserAgent from 'user-agents';\n\nconst userAgent = new UserAgent({ platform: 'Win32' });\nconst userAgents = Array(1000).fill().map(() => userAgent());\n```\n\nThis code example initializes a single user agent with a filter that limits the platform to `Win32`, and then uses that instance to generate 1000 more user agents with the same filter.\n\n\n### Regular Expression Matching\n\nYou can pass a regular expression as a filter and the generated user agent will be guaranteed to match that regular expression.\n\n```javascript\nimport UserAgent from 'user-agents';\n\nconst userAgent = new UserAgent(/Safari/);\n```\n\nThis example will generate a user agent that contains a `Safari` substring.\n\n\n### Custom Filter Functions\n\nIt's also possible to implement completely custom logic by using a filter as a function.\nThe raw `userAgent.data` object will be passed into your function, and it will be included as a possible candidate only if your function returns `true`.\nIn this example, we'll use the [useragent](https://www.npmjs.com/package/useragent) package to parse the user agent string and then restrict the generated user agents to iOS devices with an operating system version of 11 or greater.\n\n```javascript\nimport UserAgent from 'user-agents';\nimport { parse } from 'useragent';\n\nconst userAgent = new UserAgent((data) => {\n  const os = parse(data.userAgent).os;\n  return os.family === 'iOS' && parseInt(os.major, 10) > 11;\n});\n```\n\nThe filtering that you apply here is completely up to you, so there's really no limit to how specific it can be.\n\n\n### Combining Filters With Arrays\n\nYou can also use arrays to specify collections of filters that will all be applied.\nThis example combines a regular expression filter with an object filter to generate a user agent with a connection type of `wifi`, a platform of `MacIntel`, and a user agent that includes a `Safari` substring.\n\n```javascript\nimport UserAgent from 'user-agents';\n\nconst userAgent = new UserAgent([\n  /Safari/,\n  {\n    connection: {\n      type: 'wifi',\n    },\n    platform: 'MacIntel',\n  },\n]);\n```\n\nThis example also shows that you can specify both multiple and nested properties on object filters.\n\n\n## API\n\n### class: UserAgent([filters])\n\n- `filters` <`Array`, `Function`, `Object`, `RegExp`, or `String`> - A set of filters to apply to the generated user agents.\n    The filter specification is extremely flexible, and reading through the [Examples](#examples) section is the best way to familiarize yourself with what sort of filtering is possible.\n\n`UserAgent` is an object that contains the details of a randomly generated user agent and corresponding browser fingerprint.\nEach time the class is instantiated, it will randomly populate the instance with a new user agent based on the specified filters.\nThe instantiated class can be cast to a user agent string by explicitly calling `toString()`, accessing the `userAgent` property, or implicitly converting the type to a primitive or string in the standard JavaScript ways (*e.g.* `` `${userAgent}` ``).\nOther properties can be accessed as outlined below.\n\n\n#### userAgent.random()\n\n- returns: <`UserAgent`>\n\nThis method generates a new `UserAgent` instance using the same filters that were used to construct `userAgent`.\nThe following examples both generate two user agents based on the same filters.\n\n```javascript\n// Explicitly use the constructor twice.\nconst firstUserAgent = new UserAgent(filters);\nconst secondUserAgent = new UserAgent(filters);\n```\n\n```javascript\n// Use the `random()` method to construct a second user agent.\nconst firstUserAgent = new UserAgent(filters);\nconst secondUserAgent = firstUserAgent.random();\n```\n\nThe reason to prefer the second pattern is that it reuses the filter processing and preparation of the data for random selection.\nSubsequent random generations can easily be over 100x faster than the initial construction.\n\n\n#### userAgent()\n\n- returns: <`UserAgent`>\n\nAs a bit of syntactic sugar, you can call a `UserAgent` instance like `userAgent()` as a shorthand for `userAgent.random()`.\nThis allows you to think of the instance as a generator, and lends itself to writing code like this.\n\n```javascript\nconst generateUserAgent = new UserAgent(filters);\nconst userAgents = Array(100).fill().map(() => generateUserAgent());\n```\n\n#### userAgent.toString()\n\n- returns: <`String`>\n\nCasts the `UserAgent` instance to a string which corresponds to the user agent header.\nEquivalent to accessing the `userAgent.userAgent` property.\n\n\n#### userAgent.data\n\n- returns: <`Object`>\n    - `appName` <`String`> - The value of [navigator.appName](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName).\n    - `connection` <`Object`> - The value of [navigator.connection](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection).\n    - `cpuClass` <`String`> - The value of [navigator.cpuClass](https://msdn.microsoft.com/en-us/library/ms531090\\(v=vs.85\\).aspx).\n    - `deviceCategory` <`String`> - One of `desktop`, `mobile`, or `tablet` depending on the type of device.\n    - `oscpu` <`String`> - The value of [navigator.oscpu](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu).\n    - `platform` <`String`> - The value of [navigator.platform](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform).\n    - `pluginsLength` <`Number`> - The value of [navigator.plugins.length](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins).\n    - `screenHeight` <`Number`> - The value of [screen.height](https://developer.mozilla.org/en-US/docs/Web/API/Screen/height).\n    - `screenWidth` <`Number`> - The value of [screen.width](https://developer.mozilla.org/en-US/docs/Web/API/Screen/width).\n    - `vendor` <`String`> - The value of [navigator.vendor](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor).\n    - `userAgent` <`String`> - The value of [navigator.userAgent](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent).\n    - `viewportHeight` <`Number`> - The value of [window.innerHeight](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight).\n    - `viewportWidth` <`Number`> - The value of [window.innerWidth](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth).\n\nThe `userAgent.data` contains the randomly generated fingerprint for the `UserAgent` instance.\nNote that each property of `data` is also accessible directly on `userAgent`.\nFor example, `userAgent.appName` is equivalent to `userAgent.data.appName`.\n\n\n## Versioning\n\nThe project follows [the Semantic Versioning guidelines](https://semver.org/).\nThe automated deployments will always correspond to patch versions, and minor versions should not introduce breaking changes.\nIt's likely that the structure of user agent data will change in the future, and this will correspond to a new major version.\n\nPlease keep in mind that older major versions will cease to be updated after a new major version is released.\nYou can continue to use older versions of the software, but you'll need to upgrade to get access to the latest data.\n\n\n## Acknowledgements\n\nThe user agent frequency data used in this library is generously provided by [Intoli](https://intoli.com), the premier residential and smart proxy provider for web scraping.\nThe details of how the data is updated can be found in the blog post [User-Agents — A random user agent generation library that's always up to date](https://intoli.com/blog/user-agents/).\n\nIf you have a high-traffic website and would like to contribute data to the project, then send us an email at [contact@intoli.com](mailto:contact@intoli.com).\nAdditional data sources will help make the library more useful, and we'll be happy to add a link to your site in the acknowledgements.\n\n\n## Contributing\n\nContributions are welcome, but please follow these contributor guidelines outlined in [CONTRIBUTING.md](CONTRIBUTING.md).\n\n\n## License\n\nUser-Agents is licensed under a [BSD 2-Clause License](LICENSE) and is copyright [Intoli, LLC](https://intoli.com).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/intoli/user-agents.git"
  },
  "scripts": {
    "build": "NODE_ENV=production webpack",
    "gunzip-data": "babel-node src/gunzip-data.js src/user-agents.json.gz",
    "lint": "eslint src/",
    "postversion": "git push && git push --tags",
    "test": "NODE_ENV=testing mocha --exit --require babel-register",
    "update-data": "babel-node src/update-data.js src/user-agents.json.gz"
  },
  "version": "1.0.275"
}
