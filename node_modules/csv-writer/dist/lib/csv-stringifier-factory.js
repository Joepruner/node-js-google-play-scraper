"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var array_1 = require("./csv-stringifiers/array");
var field_stringifier_1 = require("./field-stringifier");
var object_1 = require("./csv-stringifiers/object");
var DEFAULT_FIELD_DELIMITER = ',';
var VALID_FIELD_DELIMITERS = [DEFAULT_FIELD_DELIMITER, ';'];
var CsvStringifierFactory = /** @class */ (function () {
    function CsvStringifierFactory() {
    }
    CsvStringifierFactory.prototype.createArrayCsvStringifier = function (params) {
        var fieldDelimiter = params.fieldDelimiter || DEFAULT_FIELD_DELIMITER;
        _validateFieldDelimiter(fieldDelimiter);
        var fieldStringifier = new field_stringifier_1.FieldStringifier(fieldDelimiter);
        return new array_1.ArrayCsvStringifier(fieldStringifier, fieldDelimiter, params.recordDelimiter, params.header);
    };
    CsvStringifierFactory.prototype.createObjectCsvStringifier = function (params) {
        var fieldDelimiter = params.fieldDelimiter || DEFAULT_FIELD_DELIMITER;
        _validateFieldDelimiter(fieldDelimiter);
        var fieldStringifier = new field_stringifier_1.FieldStringifier(fieldDelimiter);
        return new object_1.ObjectCsvStringifier(fieldStringifier, fieldDelimiter, params.header, params.recordDelimiter);
    };
    return CsvStringifierFactory;
}());
exports.CsvStringifierFactory = CsvStringifierFactory;
function _validateFieldDelimiter(delimiter) {
    if (VALID_FIELD_DELIMITERS.indexOf(delimiter) === -1) {
        throw new Error("Invalid field delimiter `" + delimiter + "` is specified");
    }
}
//# sourceMappingURL=csv-stringifier-factory.js.map